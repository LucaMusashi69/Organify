actor PostCrud {
    type PostId = Nat32;
    type Post = {
        creator: Principal;
        message: Text;
    };
    
    type User = {
        firstName: Text;
        lastName: Text;
        age: Nat;
    };

    stable var postId: PostId = 0;
    let postList = HashMap.HashMap<Text, Post>(0, Text.equal, Text.hash);
    let userList = HashMap.HashMap<Text, User>(0, Text.equal, Text.hash);

    private func generateTaskId() : Nat32 {
        postId += 1;
        return postId;
    };

    public shared (msg) func createPost(message: Text) : async () {
        let user: Principal = msg.caller;
        let post = {creator=user; message=message};

        postList.put(Nat32.toText(generateTaskId()), post);
        Debug.print("New post created! ID: " # Nat32.toText(postId));
        return ();
    };

    public shared (msg) func registerUser(firstName: Text, lastName: Text, age: Nat) : async () {
        let userName = firstName # " " # lastName;
        let user = {firstName = firstName; lastName = lastName; age = age};

        userList.put(userName, user);
        Debug.print("New user registered! Name: " # userName);
        return ();
    };

    // Resto de funciones como getPosts, getPost, updatePost, deletePost, etc.
}
